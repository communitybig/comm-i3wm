# Maintainer: Narayan Silva<narayanlimasilva@gmail.com>
# Contributor: Vilmar Catafesta <vcatafesta@gmail.com>

pkgname=comm-i3wm
pkgdesc="Meta package for i3wm"
pkgver=1.0.0
pkgrel=1
arch=('any')
license=('MIT')
url="https://github.com/communitybig/${pkgname}"
source=("git+${url}.git")
md5sums=('SKIP')
depends=(
	i3-wm
)
optdepends=(
	'xdg-desktop-portal-gtk: Portal functionality for GTK apps'
	'xdg-desktop-portal: Portal functionality'
	'xdg-desktop-portal-xapp: Portal functionality for Xapp'
	'eza: Modern ls replacement'
	'python-pip: Python package manager'
	'python-gobject: Python bindings for GLib/GObject'
	'python-screeninfo: Screen information tool'
	'tumbler: Thumbnail service'
	'brightnessctl: Brightness control'
	'nm-connection-editor: Network manager editor'
	'network-manager-applet: Network manager applet'
	'gtk4: GTK 4 toolkit'
	'gtk3: GTK 3 toolkit'
	'libadwaita: Adwaita widgets library'
	'fuse2: Filesystem in userspace v2'
	'imagemagick: Image manipulation tools'
	'jq: JSON processor'
	'xclip: Command line clipboard tool'
	'gnome-terminal: GNOME terminal emulator'
	'xterm: X terminal emulator'
	'sync-gnome-theme-to-qt: Sync GNOME theme to Qt'
	'blueberry: Bluetooth configuration tool'
	'scrot: Screenshot tool'
	'qt5ct: Qt5 configuration tool'
	'polkit-gnome: PolicyKit integration'
	'polkit: Authorization framework'
	'zsh: Z shell'
	'zsh-completions: Additional completion definitions for zsh'
	'fzf: Command-line fuzzy finder'
	'pavucontrol: PulseAudio volume control'
	'bigicons-papient: Icon theme'
	'papirus-icon-theme: Papirus icon theme'
	'breeze-gtk: Breeze GTK theme'
	'xcursor-breeze: Breeze cursor theme'
	'nordic-darker-theme: Nordic darker theme'
	'xdg-user-dirs-gtk: User directories for GTK'
	'gvfs: Virtual filesystem for GIO'
	'gvfs-afc: AFC backend for GVFS'
	'gvfs-mtp: MTP backend for GVFS'
	'gvfs-goa: GOA backend for GVFS'
	'gvfs-smb: SMB/CIFS backend for GVFS'
	'gvfs-gphoto2: gphoto2 backend for GVFS'
	'otf-font-awesome: Font Awesome OTF font'
	'ttf-fira-sans: Fira Sans font'
	'ttf-fira-code: Fira Code font'
	'ttf-firacode-nerd: Nerd Fonts patched Fira Code'
	'ttf-dejavu: DejaVu font family'
	'ttf-nerd-fonts-symbols-with-biglinux: Nerd Fonts symbols'
	'oh-my-posh-bin: Prompt theme engine'
	'checkupdates-with-aur: Check updates including AUR'
	'unarchiver: Archive utility'
	'7zip: File archiver'
	'xarchiver: GTK frontend for various archive formats'
	'imv: Image viewer'
	'ffmpegthumbnailer: Thumbnail generator'
	'wireplumber: Session and policy manager for PipeWire'
	'qt5-svg: SVG support for Qt5'
	'qt5-graphicaleffects: Graphical effects for Qt5'
	'qt5-quickcontrols2: Quick Controls 2 for Qt5'
	'flatpak: Application sandboxing'
	'pacseek: Package manager interface'
	'xorg-xinit: X server initializer'
	'biglinux-meta-audio-config: Audio configuration'
	'portaudio: Audio I/O library'
	'lib32-portaudio: 32-bit audio I/O library'
	'pipewire-alsa: PipeWire ALSA support'
	'pipewire-pulse: PipeWire PulseAudio support'
	'lib32-pipewire: 32-bit PipeWire libraries'
	'libpipewire: PipeWire library'
	'lib32-libpipewire: 32-bit PipeWire library'
	'gst-plugin-pipewire: GStreamer plugin for PipeWire'
	'manjaro-pipewire: Pipewire support for Manjaro'
	'pcaudiolib: Portable C audio library'
	'sox: Sound processing tool'
	'libsndfile: C library for reading/writing sound files'
	'lib32-libsndfile: 32-bit libsndfile'
	'xf86-input-elographics: Elographics input driver'
	'xf86-input-evdev: Generic Linux input driver'
	'xf86-input-libinput: libinput-based X.Org driver'
	'xf86-input-vmmouse: VMware mouse input driver'
	'xf86-input-void: Null input driver'
	'timeshift: System restore utility'
	'grub-btrfs-timeshift: GRUB support for btrfs snapshots'
	'grub-btrfs: GRUB module for btrfs'
	'amd-ucode: AMD microcode updates'
	'libxcvt: X11 scaling library'
	'b43-fwcutter: Firmware extraction tool for Broadcom wireless chips'
	'glxinfo: OpenGL information utility'
	'gnome-disk-utility: Disk utility'
	'simplescreenrecorder: Screen recorder'
	'python-pywal: Generate and change color schemes'
	'auto-tweaks-browser: Browser optimization tool'
	'big-mount: Mounting utility'
	'comm-base-config: BASE configuration package'
	'big-preload: Preloading tool'
	'mhwd: Manjaro Hardware Detection'
	'mhwd-db: MHWD database'
	'mhwd-biglinux: BigLinux MHWD'
	'mhwd-amdgpu: MHWD AMD GPU support'
	'mhwd-nvidia: MHWD NVIDIA support'
	'mhwd-ati: MHWD ATI support'
	'mhwd-nvidia-470xx: MHWD NVIDIA 470xx drivers'
	'xf86-video-amdgpu: X.Org AMD GPU driver'
	'vulkan-mesa-layers: Vulkan layers for Mesa'
	'lib32-vulkan-mesa-layers: 32-bit Vulkan layers for Mesa'
	'vulkan-headers: Vulkan API headers'
	'vulkan-tools: Vulkan utilities'
	'vulkan-icd-loader: Vulkan installable client driver loader'
	'lib32-vulkan-icd-loader: 32-bit Vulkan ICD loader'
	'vulkan-intel: Intel Vulkan driver'
	'lib32-vulkan-intel: 32-bit Intel Vulkan driver'
	'vulkan-radeon: Radeon Vulkan driver'
	'lib32-vulkan-radeon: 32-bit Radeon Vulkan driver'
	'mesa: OpenGL implementation'
	'lib32-mesa: 32-bit OpenGL implementation'
	'xorg-server: X.Org display server'
	'xorg-xinit: X server initializer'
	'xorg-xrandr: Display configuration utility'
	'xorg-xrdb: X server resource database utility'
	'xorg-xbacklight: Backlight control utility'
	'xorg-xinput: X input device configuration utility'
	'xorg-xkill: Kill X clients utility'
	'xorg-xprop: X property display utility'
	'xorg-xhost: X server access control utility'
	'i3lock: Screen locker for i3'
	'i3status: Status bar for i3'
	'dmenu: Dynamic menu for X'
	'rofi: Window switcher, run dialog and dmenu replacement'
	'polybar: Status bar'
	'zenity: Display GTK dialogs from command line'
	'feh: Image viewer and wallpaper setter'
	'dunst: Notification daemon'
	'xkeyboard-config: X keyboard configuration'
	'nitrogen: Background browser and setter'
	'wmutils: Window manipulation utilities'
	'lxappearance: GTK theme switcher'
	'clipit: Clipboard manager'
	'yad: Dialog display utility'
	'xfce4-power-manager: Power manager'
	'lightdm: Display manager'
	'lightdm-slick-greeter: Modern LightDM greeter'
	'lightdm-settings: LightDM settings utility'
	'arandr: XRandR GUI'
	'clang: C language family frontend for LLVM'
	'gnu-free-fonts: Free UCS outline fonts'
	'harfbuzz-icu: OpenType text shaping engine (ICU integration)'
	'hyphen: Hyphenation library'
	'inotify-tools: File system notification tools'
	'inxi: System information script'
	'libavif: AVIF image format library'
	'lsof: List open files'
	'ncdu: Disk usage analyzer'
	'sysstat: System performance tools'
	'chafa: Terminal graphics for the 21st century'
	'firefox: Web browser'
	'thunar: File manager'
	'thunar-archive-plugin: Archive plugin for Thunar'
	'thunar-volman: Volume management for Thunar'
	'evince: Document viewer'
	'libreoffice-fresh: Office suite'
	'galculator: GTK calculator'
	'xed: Text editor'
	'pix: Image viewer'
	'vlc: Media player'
	'pantheon-calendar: Calendar application'
	'comm-improve-compatibility: Compatibility improvement tools'
	'comm-xfce-datetime: XFCE datetime utilities'
)
install=pkgbuild.install

package() {
	cd "${srcdir}/${pkgname}"

	mkdir -p "${pkgdir}/usr/share/${pkgname}"
	printf "%s\n" "${optdepends[@]}" | sed 's/^.*: //' > "${pkgdir}/usr/share/${pkgname}/optdepends"

	# Determine the correct source directory
	if [ -d "${pkgname}" ]; then
		srcdir="${srcdir}/${pkgname}/${pkgname}"
	else
		srcdir="${srcdir}/${pkgname}"
	fi

	# Install files
	local dirs=("usr" "etc" "opt")
	for dir in "${dirs[@]}"; do
		if [ -d "${srcdir}/${dir}" ]; then
			# Copiar apenas os arquivos específicos, não a estrutura inteira
			mkdir -p "${pkgdir}/${dir}"
			cp -a "${srcdir}/${dir}"/* "${pkgdir}/${dir}/"
		fi
	done
	
	# Criar os diretórios necessários
	mkdir -p "${pkgdir}/etc/lightdm"
	mkdir -p "${pkgdir}/usr/share/backgrounds"
	mkdir -p "${pkgdir}/usr/share/libalpm/scripts"
	mkdir -p "${pkgdir}/usr/share/libalpm/hooks"
	
	# Instalar o arquivo de configuração do slick-greeter com backup
	echo "[Greeter]" > "${pkgdir}/etc/lightdm/slick-greeter.conf.big"
	echo "background=/usr/share/backgrounds/lightdm-default.jpg" >> "${pkgdir}/etc/lightdm/slick-greeter.conf.big"
	
	# Verificar se há um wallpaper no repositório para copiar
	if [ -f "${srcdir}/lightdm-default.jpg" ]; then
		install -Dm644 "${srcdir}/lightdm-default.jpg" "${pkgdir}/usr/share/backgrounds/lightdm-default.jpg"
	elif [ -f "lightdm-default.jpg" ]; then
		install -Dm644 "lightdm-default.jpg" "${pkgdir}/usr/share/backgrounds/lightdm-default.jpg"
	else
		# Se não encontrar o wallpaper, usar um wallpaper padrão
		msg "Warning: Default wallpaper not found. A placeholder will be installed."
		touch "${pkgdir}/usr/share/backgrounds/lightdm-default.jpg"
	fi
	
	# Instalar o script e o hook com permissões corretas
	cat > "${pkgdir}/usr/share/libalpm/scripts/change-files" << 'EOF'
#!/bin/bash

# Diretórios
configDir="/etc/lightdm"
backupDir="/etc/lightdm/backup"

# Arquivos
configFile="${configDir}/slick-greeter.conf"
backupFile="${backupDir}/slick-greeter.conf.original"
customFile="${configDir}/slick-greeter.conf.big"

# Criar diretório de backup se não existir
mkdir -p "${backupDir}"

# Fazer backup do arquivo original se existir e ainda não tiver backup
if [ -f "${configFile}" ] && [ ! -f "${backupFile}" ]; then
    cp "${configFile}" "${backupFile}"
    echo "Backup do arquivo original criado em: ${backupFile}"
fi

# Verificar se o arquivo personalizado existe
if [ -f "${customFile}" ]; then
    # Copiar o arquivo personalizado
    cp "${customFile}" "${configFile}"
    echo "Configuração personalizada do slick-greeter aplicada com sucesso"
    
    # Definir permissões corretas
    chmod 644 "${configFile}"
    chown root:root "${configFile}"
else
    echo "ERRO: Arquivo personalizado não encontrado em ${customFile}"
    exit 1
fi

exit 0
EOF

	chmod 755 "${pkgdir}/usr/share/libalpm/scripts/change-files"
	
	cat > "${pkgdir}/usr/share/libalpm/hooks/change-files.hook" << 'EOF'
[Trigger]
Type = Package
Operation = Install
Operation = Upgrade
Target = lightdm-slick-greeter
Target = comm-i3wm

[Action]
Description = Configurando wallpaper personalizado no LightDM Slick Greeter
When = PostTransaction
Exec = /usr/share/libalpm/scripts/change-files
NeedsTargets
EOF

	# Install license file if present
	if [ -f "LICENSE" ]; then
		install -Dm644 LICENSE "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
	fi

	# Install documentation if present
	if [ -f "README.md" ]; then
		install -Dm644 README.md "${pkgdir}/usr/share/doc/${pkgname}/README.md"
	fi
    
    # Criar diretório para scripts
    mkdir -p "${pkgdir}/usr/share/comm-i3wm/scripts"
    
    # Criar o script diretamente
    cat > "${pkgdir}/usr/share/comm-i3wm/scripts/configure-btop.sh" << 'EOF'
#!/usr/bin/env bash

# Função para configurar o btop
configure_btop() {
    echo "Configurando terminal para btop..."
    
    # Verificar se o arquivo btop.desktop existe
    if [ -f /usr/share/applications/btop.desktop ]; then
        # Backup do arquivo original
        if [ ! -f /usr/share/applications/btop.desktop.original ]; then
            cp -f /usr/share/applications/btop.desktop /usr/share/applications/btop.desktop.original
        fi
        
        # Substituir conteúdo
        cat > /usr/share/applications/btop.desktop << 'EOFINNER'
[Desktop Entry]
Type=Application
Version=1.0
Name=btop++
GenericName=System Monitor
Comment=Resource monitor that shows usage and stats for processor, memory, disks, network and processes
Icon=btop
Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- btop; elif command -v kitty >/dev/null; then kitty btop; elif command -v konsole >/dev/null; then konsole -e btop; else x-terminal-emulator -e btop; fi"
Terminal=false
Categories=System;Monitor;ConsoleOnly;
Keywords=system;process;task

Actions=SoftwareRender;

[Desktop Action SoftwareRender]
Name=Software Render
Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- env SoftwareRender=1 btop; elif command -v kitty >/dev/null; then kitty env SoftwareRender=1 btop; elif command -v konsole >/dev/null; then konsole -e env SoftwareRender=1 btop; else x-terminal-emulator -e env SoftwareRender=1 btop; fi"
EOFINNER
        echo "Configuração do btop concluída."
    else
        echo "Arquivo btop.desktop não encontrado. Instalando versão personalizada..."
        # Criar o arquivo mesmo se não existir
        mkdir -p /usr/share/applications
        cat > /usr/share/applications/btop.desktop << 'EOFINNER'
[Desktop Entry]
Type=Application
Version=1.0
Name=btop++
GenericName=System Monitor
Comment=Resource monitor that shows usage and stats for processor, memory, disks, network and processes
Icon=btop
Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- btop; elif command -v kitty >/dev/null; then kitty btop; elif command -v konsole >/dev/null; then konsole -e btop; else x-terminal-emulator -e btop; fi"
Terminal=false
Categories=System;Monitor;ConsoleOnly;
Keywords=system;process;task

Actions=SoftwareRender;

[Desktop Action SoftwareRender]
Name=Software Render
Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- env SoftwareRender=1 btop; elif command -v kitty >/dev/null; then kitty env SoftwareRender=1 btop; elif command -v konsole >/dev/null; then konsole -e env SoftwareRender=1 btop; else x-terminal-emulator -e env SoftwareRender=1 btop; fi"
EOFINNER
        echo "Versão personalizada do btop.desktop instalada."
    fi
}

# Executar a função
configure_btop
EOF
    
    # Tornar o script executável
    chmod 755 "${pkgdir}/usr/share/comm-i3wm/scripts/configure-btop.sh"

    # Criar o script para configurar o pacseek
    cat > "${pkgdir}/usr/share/comm-i3wm/scripts/configure-pacseek.sh" << 'EOF'
#!/usr/bin/env bash

# Função para configurar o pacseek
configure_pacseek() {
    echo "Configurando terminal para pacseek..."
    
    # Verificar se o arquivo pacseek.desktop existe
    if [ -f /usr/share/applications/org.moson.pacseek.desktop ]; then
        # Backup do arquivo original
        if [ ! -f /usr/share/applications/org.moson.pacseek.desktop.original ]; then
            cp -f /usr/share/applications/org.moson.pacseek.desktop /usr/share/applications/org.moson.pacseek.desktop.original
        fi
        
        # Substituir conteúdo
        cat > /usr/share/applications/org.moson.pacseek.desktop << 'EOFINNER'
[Desktop Entry]

Name=pacseek
Comment=A terminal user interface for searching and installing Arch Linux packages

Icon=pacseek
Type=Application
Categories=Utility;
Keywords=terminal;package;

Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- pacseek; elif command -v kitty >/dev/null; then kitty pacseek; elif command -v konsole >/dev/null; then konsole -e pacseek; else x-terminal-emulator -e pacseek; fi"
Terminal=false
StartupNotify=false

[Desktop Action SoftwareRender]
Name=Software Render
Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- pacseek; elif command -v kitty >/dev/null; then kitty pacseek; elif command -v konsole >/dev/null; then konsole -e pacseek; else x-terminal-emulator -e pacseek; fi"
EOFINNER
        echo "Configuração do pacseek concluída."
    else
        echo "Arquivo org.moson.pacseek.desktop não encontrado. Verificando localizações alternativas..."
        
        # Verificar se existe em outra localização
        if [ -f /usr/share/applications/pacseek.desktop ]; then
            if [ ! -f /usr/share/applications/pacseek.desktop.original ]; then
                cp -f /usr/share/applications/pacseek.desktop /usr/share/applications/pacseek.desktop.original
            fi
            
            cat > /usr/share/applications/pacseek.desktop << 'EOFINNER'
[Desktop Entry]

Name=pacseek
Comment=A terminal user interface for searching and installing Arch Linux packages

Icon=pacseek
Type=Application
Categories=Utility;
Keywords=terminal;package;

Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- pacseek; elif command -v kitty >/dev/null; then kitty pacseek; elif command -v konsole >/dev/null; then konsole -e pacseek; else x-terminal-emulator -e pacseek; fi"
Terminal=false
StartupNotify=false

[Desktop Action SoftwareRender]
Name=Software Render
Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- pacseek; elif command -v kitty >/dev/null; then kitty pacseek; elif command -v konsole >/dev/null; then konsole -e pacseek; else x-terminal-emulator -e pacseek; fi"
EOFINNER
            echo "Configuração do pacseek concluída em localização alternativa."
        else
            echo "Pacseek não parece estar instalado. Criando arquivo de desktop..."
            # Criar o arquivo de desktop para quando pacseek for instalado
            mkdir -p /usr/share/applications
            cat > /usr/share/applications/org.moson.pacseek.desktop << 'EOFINNER'
[Desktop Entry]

Name=pacseek
Comment=A terminal user interface for searching and installing Arch Linux packages

Icon=pacseek
Type=Application
Categories=Utility;
Keywords=terminal;package;

Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- pacseek; elif command -v kitty >/dev/null; then kitty pacseek; elif command -v konsole >/dev/null; then konsole -e pacseek; else x-terminal-emulator -e pacseek; fi"
Terminal=false
StartupNotify=false

[Desktop Action SoftwareRender]
Name=Software Render
Exec=sh -c "if command -v gnome-terminal >/dev/null; then gnome-terminal -- pacseek; elif command -v kitty >/dev/null; then kitty pacseek; elif command -v konsole >/dev/null; then konsole -e pacseek; else x-terminal-emulator -e pacseek; fi"
EOFINNER
            echo "Arquivo de desktop para pacseek criado."
        fi
    fi
}

# Executar a função
configure_pacseek
EOF
    
    # Tornar o script executável
    chmod 755 "${pkgdir}/usr/share/comm-i3wm/scripts/configure-pacseek.sh"
}
