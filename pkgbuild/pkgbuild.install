#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck source=/dev/null

export TERM=${TERM:-xterm}
export TERM=${TERM:-xterm-256color}

# Defining color variables (bold only)
export black="\033[1;30m"
export red="\033[1;31m"
export green="\033[1;32m"
export yellow="\033[1;33m"
export blue="\033[1;34m"
export magenta="\033[1;35m"
export cyan="\033[1;36m"
export white="\033[1;37m"
#
export COL_NC='\e[0m' # No Color
export COL_LIGHT_GREEN='\e[1;32m'
export COL_LIGHT_RED='\e[1;31m'
export TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
export CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
export INFO="[i]"
export DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
export OVER="\\r\\033[K"
export DOTPREFIX="  ${black}::${reset} "

# Setting variables for bold and reset
export bold="\033[1m"
export reset="\033[0m"
declare IS_UPGRADE=false
declare IS_DBLOCK=false
declare DM='lightdm'
declare WM='i3wm'
declare pkgname=comm-"${WM}"
declare servicesToEnable=("${DM}" "avahi-daemon" "sshd" "cups" "bluetooth")
declare servicesToDisable=("lxdm" "sddm" "gdm")

msg() {
	local msg="$1"
	echo -e "${green}==>[${pkgname}] ${bold}${yellow}${msg}${reset}" >&2
}

log_ok() { echo -e "  ${TICK} ${*}${reset}"; }
log_err() { echo -e "  ${CROSS} ${*}${reset}"; }

die() {
	local msg=$1
	shift
	echo -e "  ${CROSS} ${red}${msg}${reset}"
	sh_restoring_lock
	exit 1
}

sh_load_optdepends() {
	local info_file="/usr/share/${pkgname}/optdepends"

	if [[ -f "$info_file" && -r "$info_file" ]]; then
		mapfile -t OPTDEPENDS <"$info_file"
	else
		msg "${red}FATAL: Something went wrong! File '$info_file' not found or without read permission."
	fi
}

sh_restoring_lock() {
	if $IS_DBLOCK; then
		msg "Restauring pacman lock: /var/lib/pacman/db.lck"
		touch /var/lib/pacman/db.lck &>/dev/null
	fi
}

sh_check_package_exist() {
	local pkg
	local not_installed=()
	local not_found=()

	# Verifica pacotes instalados localmente
	for pkg in "${OPTDEPENDS[@]}"; do
		if ! pacman -Qq "$pkg" &>/dev/null; then
			not_installed+=("$pkg")
		fi
		log_ok "Check: ${cyan}$pkg"
	done

	# Verifica pacotes ausentes no repositório
	if ((${#not_installed[@]})); then
		for pkg in "${not_installed[@]}"; do
			if ! pacman -Ssq "^$pkg$" &>/dev/null; then
				not_found+=("$pkg")
			fi
		done
	fi

	# Se houver pacotes não encontrados, avisa mas continua
	if ((${#not_found[@]})); then
		msg "${yellow}Warning: The following packages were not found in the repositories: ${not_found[*]}"
		msg "${yellow}Continuing without installing these packages."
	fi
}

sh_start_dbus_in_chroot() {
	# Verifica se o D-Bus já está em execução
	if ! pgrep -x "dbus-daemon" >/dev/null; then
		# Cria o diretório para o socket do D-Bus
		mkdir -p /run/dbus
		chmod 755 /run/dbus

		# Inicia o D-Bus
		dbus-daemon --system --fork

		# Configura as variáveis de ambiente
		export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
		export DBUS_SYSTEM_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
	fi
}

# Função para manipular arquivos skel
copy_skel_files() {
    local target_dir="$1"
    local mode="$2"  # "all" para copiar tudo, "new" para copiar apenas novos
    
    # Verificar se o diretório existe
    if [[ ! -d "$target_dir" ]]; then
        mkdir -p "$target_dir" &>/dev/null
    fi
    
    if [[ "$mode" == "all" ]]; then
        # Copia todos os arquivos de skel (para instalação inicial)
        msg "Copying skel to $target_dir..."
        cp -rfp /etc/skel/. "$target_dir/" &>/dev/null
        log_ok "Full skel copy complete"
    elif [[ "$mode" == "new" ]]; then
        # Copia apenas arquivos que não existem (para atualização)
        msg "Copying only new skel files to $target_dir..."
        
        # Verifica se rsync está disponível
        if command -v rsync >/dev/null; then
            # Usar rsync com opção --ignore-existing
            rsync -a --ignore-existing /etc/skel/ "$target_dir/" &>/dev/null
            log_ok "Copied new files only using rsync"
        else
            # Fallback para método mais manual se rsync não estiver disponível
            find /etc/skel -type f -print0 | while IFS= read -r -d '' file; do
                # Obtém caminho relativo
                rel_path="${file#/etc/skel/}"
                # Verifica se o arquivo já existe no destino
                if [[ ! -e "$target_dir/$rel_path" ]]; then
                    # Cria diretório pai se necessário
                    mkdir -p "$(dirname "$target_dir/$rel_path")" &>/dev/null
                    # Copia o arquivo
                    cp -p "$file" "$target_dir/$rel_path" &>/dev/null
                fi
            done
            log_ok "Copied new files only using find/cp"
        fi
    fi
}

# Função para adicionar configuração ao arquivo i3 se não existir
add_i3_config_if_not_exists() {
    local config_file="$1"
    local pattern="$2"
    local config_line="$3"
    
    if [[ -f "$config_file" ]] && ! grep -q "$pattern" "$config_file"; then
        echo -e "\n# Added by ${pkgname} upgrade\n$config_line" >> "$config_file"
        log_ok "Added new configuration to $config_file"
    fi
}

post_install() {
	msg "Initializing system installation and configuration..."

	sh_load_optdepends

	[[ -e /etc/environment ]] && source /etc/environment
	: "${IN_CHROOT_INSTALLER:=false}"
	: "${IN_CHROOT_INSTALLER_USER:=root}"

	if $IN_CHROOT_INSTALLER; then
		sh_start_dbus_in_chroot
	fi

	if [[ -f /var/lib/pacman/db.lck ]]; then
		IS_DBLOCK=true
		msg "Removing pacman lock: /var/lib/pacman/db.lck"
		rm -f /var/lib/pacman/db.lck &>/dev/null
	fi

	# Common packages for all GPUs - simplified list
	COMMON_PACKAGES=(
		"mhwd-biglinux"
		"mesa"
		"vulkan-mesa-layers"
	)

	synchronizing_database() {
		pacman -Sy --noconfirm &>/dev/null || msg "${yellow}Warning: Database synchronization failed. Continuing..."
	}

	install_packages() {
		local packages=("$@")
		local not_found=()
		
		# Verificar se os pacotes existem
		for pkg in "${packages[@]}"; do
			if ! pacman -Ssq "^$pkg$" &>/dev/null; then
				not_found+=("$pkg")
			fi
		done
		
		# Remover pacotes não encontrados
		for pkg in "${not_found[@]}"; do
			packages=(${packages[@]//$pkg/})
		done
		
		# Instalar pacotes restantes se houver
		if ((${#packages[@]})); then
			if ! pacman -S --needed --noconfirm "${packages[@]}" &>/dev/null; then
				msg "${yellow}Warning: Some packages failed to install. Continuing without them."
			fi
		fi
	}

	msg "Please wait, synchronizing databases..."
	synchronizing_database

	msg "Installing common packages: ${COMMON_PACKAGES[*]}"
	install_packages "${COMMON_PACKAGES[@]}"

	msg "Checking for the existence of packages..."
	sh_check_package_exist

	# Filtrar pacotes disponíveis
	local available_packages=()
	for pkg in "${OPTDEPENDS[@]}"; do
		if pacman -Ssq "^$pkg$" &>/dev/null; then
			available_packages+=("$pkg")
		fi
	done

	msg "Installing optdepends packages (only available ones)"
	install_packages "${available_packages[@]}"

	msg "Detecting GPU and installing appropriate drivers..."
	GPU_INFO=$(lspci -nnk | grep -A3 -E "VGA|3D|Display" 2>/dev/null)

	if grep -qiw "NVIDIA" <<<"$GPU_INFO"; then
		msg "NVIDIA detected! Installing drivers..."

		KERNEL_VERSION=$(uname -r | cut -d '.' -f1,2 | tr -d '.' 2>/dev/null)
		KERNEL_PACKAGE="linux${KERNEL_VERSION}-nvidia"

		# Verificar se o pacote do kernel existe
		if pacman -Ssq "^$KERNEL_PACKAGE$" &>/dev/null; then
			msg "Detected kernel: $KERNEL_VERSION"
			msg "Installing NVIDIA packages: $KERNEL_PACKAGE nvidia-utils nvidia-settings"
			install_packages "$KERNEL_PACKAGE" "nvidia-utils" "nvidia-settings"

			msg "Blacklisting Nouveau..."
			echo -e "blacklist nouveau\ninstall nouveau /bin/true" > /etc/modprobe.d/nouveau.conf
		else
			msg "${yellow}Warning: NVIDIA kernel package $KERNEL_PACKAGE not found. Skipping driver installation."
		fi

	elif grep -qiw "Intel" <<<"$GPU_INFO"; then
		msg "Intel GPU detected! Installing drivers..."
		install_packages "vulkan-intel"
	elif grep -qEiw "AMD|ATI" <<<"$GPU_INFO"; then
		msg "AMD/ATI GPU detected! Installing drivers..."
		install_packages "vulkan-radeon" "xf86-video-amdgpu"
	else
		msg "${yellow}Warning: No compatible GPU detected. Skipping driver installation.${reset}"
	fi

	msg "Create the ${DM^} user if it doesn't exist"
	if ! id "${DM}" &>/dev/null; then
		msg "Creating ${DM^} user..."
		useradd -r -s /usr/bin/nologin -M -d /var/lib/${DM} ${DM} &>/dev/null
	else
		msg "${DM^} user already exists, skipping creation."
	fi

	msg "Setting up ${DM^} directory..."
	mkdir -p /var/lib/${DM} &>/dev/null
	chown -R ${DM}:${DM} /var/lib/${DM} &>/dev/null

	msg "Setting up user..."
	user=$(awk -F: '$3 >= 1000 && $3 < 65000 { print $1; exit }' /etc/passwd 2>/dev/null)
	if $IN_CHROOT_INSTALLER; then
		if [[ -n $IN_CHROOT_INSTALLER_USER && $IN_CHROOT_INSTALLER_USER != 'root' ]]; then
			user=$IN_CHROOT_INSTALLER_USER
		fi
	fi
	
	if [[ -n "$user" ]]; then
		user_home=$(getent passwd "$user" | cut -d: -f6)
		
		# Gerenciamento de arquivos do skel
		if ! $IS_UPGRADE; then
			# Instalação inicial - copia todos os arquivos
			copy_skel_files "$user_home" "all"
		else
			# Atualização - copia apenas arquivos novos
			copy_skel_files "$user_home" "new"
		fi

		msg "Setting user folder permissions in ${user_home}"
		chown -R "$user:$user" "$user_home" &>/dev/null
	else
		msg "${yellow}Warning: No suitable user found for skel configuration"
	fi

	if command -v nautilus &>/dev/null; then
		msg "Configuring Nautilus..."
		if glib-compile-schemas /usr/share/glib-2.0/schemas/ &>/dev/null; then
			msg "Nautilus schemas compiled successfully!"
		else
			msg "${yellow}Warning: Failed to compile Nautilus schemas. Some features may not work correctly.${reset}"
		fi
	fi

	if ! $IS_UPGRADE; then
		msg "Enabling ${DM^}..."
		if ! systemctl enable ${DM} &>/dev/null; then
			msg "${yellow}Warning: Failed to enable ${DM^}. Please enable it manually after installation.${reset}"
		fi
	fi

	for service in "${servicesToDisable[@]}"; do
		if systemctl is-enabled --quiet "${service}" 2>/dev/null; then
			msg "Disabling service ${service}..."
			if ! systemctl disable "${service}" &>/dev/null; then
				msg "${yellow}Warning: Failed to disable service ${service}"
			fi
		else
			msg "${green}Service ${service} is already inactive..."
		fi
	done

	for service in "${servicesToEnable[@]}"; do
		if systemctl is-enabled --quiet "${service}" 2>/dev/null; then
			msg "${green}Service ${service} is already enabled..."
		else
			msg "Enabling service ${service}..."
			if ! systemctl enable "${service}" &>/dev/null; then
				msg "${yellow}Warning: Failed to enable service ${service}"
			fi
		fi
	done

	if ! $IN_CHROOT_INSTALLER; then
		if ! $IS_UPGRADE; then
			msg "Please wait, Generating initramfs for all kernels..."
			if ! mkinitcpio -P &>/dev/null; then
				msg "${yellow}Warning: Failed to generate initramfs. System may not boot properly."
			fi
		fi

		msg "Configuring GRUB..."
		# Change GRUB config if it exists
		if [[ -f /etc/default/grub ]]; then
			# Backup GRUB config first
			cp -f /etc/default/grub /etc/default/grub.backup
			
			# Update GRUB distributor if needed
			if ! grep -qi "${WM}" /etc/default/grub; then
				sed -i "s/^GRUB_DISTRIBUTOR=\"\(.*\)\"/GRUB_DISTRIBUTOR=\"\1 ${WM^}\"/" /etc/default/grub
			fi
			
			# Update GRUB command line with care
			if ! grep -q "plymouth.enable=1" /etc/default/grub; then
				# Only update if certain parameters aren't already there
				sed -i 's|^GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT="quiet splash plymouth.enable=1 loglevel=4 libata.noacpi=1 acpi=force nowatchdog tsc=nowatchdog intel_pstate=active amd_pstate=active"|' /etc/default/grub
			fi

			msg "Generating GRUB configuration files..."
			if command -v update-grub &>/dev/null; then
				if ! update-grub &>/dev/null; then
					msg "${yellow}Warning: Failed to update GRUB. Please run 'update-grub' manually."
				fi
			elif command -v grub-mkconfig &>/dev/null; then
				if ! grub-mkconfig -o /boot/grub/grub.cfg &>/dev/null; then
					msg "${yellow}Warning: Failed to update GRUB. Please run 'grub-mkconfig -o /boot/grub/grub.cfg' manually."
				fi
			else
				msg "${yellow}Warning: No GRUB update command found. Please update your bootloader manually."
			fi
		else
			msg "${yellow}Warning: GRUB configuration file not found. Skipping GRUB configuration."
		fi
	fi

	# Restauring pacman lock: /var/lib/pacman/db.lck
	sh_restoring_lock

	# Execute configuration scripts
	if [ -f "/usr/share/comm-i3wm/scripts/configure-btop.sh" ]; then
		/usr/share/comm-i3wm/scripts/configure-btop.sh
	else
		msg "${yellow}Warning: btop configuration script not found."
	fi
	
	if [ -f "/usr/share/comm-i3wm/scripts/configure-pacseek.sh" ]; then
		/usr/share/comm-i3wm/scripts/configure-pacseek.sh
	else
		msg "${yellow}Warning: pacseek configuration script not found."
	fi

	if ! $IS_UPGRADE; then
		msg "Installation complete. Please reboot your system for changes to take effect."
	else
		msg "Upgrade complete."
	fi
}

post_upgrade() {
	IS_UPGRADE=true
	post_install
}
